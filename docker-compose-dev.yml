version: "3.8"

services:
  mysql:
    container_name: mysql
    image: mysql:8.0.32
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: achieve
      MYSQL_PASSWORD: 1234
    volumes:
      - mysql_data:/var/lib/mysql
#      - ./backend/init_db/init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
    ports:
      - "3307:3306"


  backend:
    container_name: backend
    build:
      context: backend
      dockerfile: dockerfile-dev
    environment:
      WAIT_HOSTS: mysql:3306
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/achieve?createDatabaseIfNotExist=true&characterEncoding=UTF-8&profileSql=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_PROFILES_ACTIVE: dev
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
    command: ["java", "-jar", "/app.jar"]
    volumes:
      - ./backend:/app
      - ./backend/target/classes:/app/classes
#
#  frontend:
#    container_name: frontend
#    build:
#      context: frontend
#      dockerfile: dockerfile
#    command: [ "npm", "run", "dev" ]
#    volumes:
#      - ./frontend:/frontend
#      - /frontend/node_modules
#      - ./frontend/.npm/_cacache:/frontend/.npm/_cacache
#      - build_folder:/frontend/dist
#    ports:
#      - "5173:5173"
#    tty: true
#    environment:
#      - npm_config_cache=/frontend/.npm/_cacache
#    depends_on:
#      - backend

  redis:
    hostname: redis
    container_name: redis
    image: redis:latest
    ports:
      - 6380:6379
    restart: always

#  influxdb:
#    image: influxdb:1.8
#    ports:
#      - "8086:8086"
#    environment:
#      - INFLUXDB_DB=k6
#
#  k6:
#    image: grafana/k6:latest
#    platform: linux/amd64
#    ports:
#      - "6565:6565"
#    environment:
#      - K6_OUT=influxdb=http://influxdb:8086/k6
#    volumes:
#      - ./devops/monitoring/k6:/scripts
#    command: run /scripts/load.js

#  nginx:
#    container_name: nginx
#    build:
#      context: devops/nginx/dev
#    restart: unless-stopped
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./devops/nginx/dev/nginx_develop.conf:/etc/nginx/nginx.conf
#      - build_folder:/var/www/frontend
#    depends_on:
#      - backend
#    expose:
#      - '80'
#      - '443'
#    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

#  certbot: # certbot 서비스 추가
#    image: certbot/certbot
#    container_name: certbot_service
#    volumes:
#      - ../certbot/conf:/etc/letsencrypt
#      - ../certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mysql_data:
  build_folder: